@use "../settings" as *;
@use "sass:map";
@use "sass:color"; // Ensure color functions work properly

// Variables
$height: 53px;
$white-color: color(50);
$black-color: color(900);
$primary-color: color(500);
$btn-primary: color(500);
$btn-light: color(50);

$btnColors: (
  primary: (
    clr: $white-color,
    bg: $btn-primary
  ),
  light: (
    clr: $black-color,
    bg: $btn-light
  )
);

// ✅ Ensure mixins are defined before usage
@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:active,
  &:focus,
  &.focus,
  &.active,
  &.show,
  &-check:checked + &,
  &:focus-visible,
  &:not(.btn-check) + &:hover,
  &:first-child:hover,
  &-check:focus-visible + &,
  &:first-child:active,
  &:not(.btn-check) + &:active {
    color: $color !important;
    background-color: color.scale($background, $lightness: -6%) !important;
    border-color: color.scale($border, $lightness: -6%) !important;
    box-shadow: none !important;
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    background-color: $background;
    border-color: $border;
    box-shadow: none;

    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
      border-color: $border;
      box-shadow: none;
    }
  }
}

.btn {
  height: $height;
  padding: 15px 24px;
  font-size: 18px;
  font-family: font(md); // ✅ Corrected font usage
  display: inline-flex;
  justify-content: center;
  align-items: center;
  border-radius: 5px;
  transition: all 0.3s ease-in-out;

  em {
    font-size: 22px;
    margin-left: 20px;
  }

  &-sm {
    height: 44px;
  }

  &.iconRight {
    em {
      margin-left: 10px;
      transition: all 0.5s ease;
    }
    &:hover {
      em {
        transform: translateX(20%);
      }
    }
  }
  @each $key, $values in $btnColors {
    // Solid Button Variant
    &-#{$key} {
      @include button-variant(
        map.get($values, clr),
        map.get($values, bg),
        map.get($values, bg)
      );
    }
  
    // Outline Button Variant
    &-outline-#{$key} {
      @include button-outline-variant(
        map.get($values, bg),
        map.get($values, clr),
        map.get($values, bg)
      );
    }
  }
  @include media-breakpoint-down(xxl) {
    height: 45px;
    font-size: 16px;
    padding: 12px 20px;
  }
  @include media-breakpoint-down(lg) {
    height: 40px;
    font-size: 14px;
    padding: 8px 16px;
  }
  @include media-breakpoint-down(sm) {
    height: 38px;
    padding: 6px 13px;
  }
}

// Ripple Effect
@keyframes ripple {
  0% {
    transform: scale(4);
  }

  100% {
    opacity: 0;
    transform: scale(40);
  }
}

.ripple-effect-dark,
.ripple-effect {
  overflow: hidden;
  position: relative;
  z-index: 1;
}

.ripple-effect span.ripple-overlay,
.ripple-effect-dark span.ripple-overlay {
  animation: ripple 0.9s;
  border-radius: 100%;
  background: $white-color;
  height: 12px;
  position: absolute;
  width: 12px;
  line-height: 1;
  opacity: 0.2;
  pointer-events: none;
  z-index: 0;
}

.ripple-effect-dark span.ripple-overlay {
  background: color(900);
  opacity: 0.07;
}